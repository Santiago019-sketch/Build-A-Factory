local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Mining Helper V2", "DarkTheme")

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Variables
local player = Players.LocalPlayer
local mining = false
local autoSell = false
local miningDelay = 0.2
local sellDelay = 5

-- Communication Functions
local function mineBlock(coordX, coordY)
    local args = {
        [1] = coordX .. "_" .. coordY
    }
    
    return ReplicatedStorage.Communication.MineBlock:InvokeServer(unpack(args))
end

local function sellItems()
    return ReplicatedStorage.Communication.SellItems:InvokeServer()
end

-- Main Mining Function
local function startMining()
    while mining do
        -- Mine in a specific pattern (4x4 area example)
        for x = 4, 11 do  -- X coordinates
            for y = 1, 15 do  -- Y coordinates
                if not mining then return end
                
                -- Attempt to mine the block
                local success, result = pcall(function()
                    mineBlock(x, y)
                end)
                
                -- If auto-sell is enabled, try to sell
                if autoSell then
                    pcall(sellItems)
                end
                
                -- Add a small delay between actions
                wait(miningDelay)
            end
        end
        
        -- Add a delay before starting the next cycle
        wait(1)
    end
end

-- GUI Creation
local MiningTab = Window:NewTab("Mining")
local MiningSection = MiningTab:NewSection("Controls")

-- Mining Toggle
MiningSection:NewToggle("Start/Stop Mining", "Toggles auto mining", function(state)
    mining = state
    if mining then
        coroutine.wrap(startMining)()
    end
end)

-- Auto Sell Toggle
MiningSection:NewToggle("Auto Sell", "Automatically sells items", function(state)
    autoSell = state
end)

-- Mining Delay Slider
MiningSection:NewSlider("Mining Delay", "Adjust mining speed", 1, 0.1, function(value)
    miningDelay = value
end)

-- Sell Delay Slider
MiningSection:NewSlider("Sell Delay", "Adjust sell frequency", 10, 1, function(value)
    sellDelay = value
end)

-- Quick Actions Section
local QuickSection = MiningTab:NewSection("Quick Actions")

-- Manual Sell Button
QuickSection:NewButton("Sell Items", "Manually sell all items", function()
    sellItems()
end)

-- Status Section
local StatusSection = MiningTab:NewSection("Status")
local statusLabel = StatusSection:NewLabel("Status: Idle")

-- Update Status
RunService.Heartbeat:Connect(function()
    if mining then
        statusLabel:UpdateLabel("Status: Mining" .. (autoSell and " (Auto-Sell ON)" or ""))
    else
        statusLabel:UpdateLabel("Status: Idle")
    end
end)

-- Keybinds
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightControl then
        Library:ToggleUI()
    end
end)

-- Error handling
game:GetService("Players").PlayerRemoving:Connect(function(plr)
    if plr == player then
        mining = false
    end
end)
