-- Orion Library for enhanced UI
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- Constants
local WORKER_COUNT = 5
local UPGRADE_TYPES = {
    "BlockCapacity",
    "DropLevel"
}
local MINE_DELAY = 0.1
local SELL_DELAY = 1

-- Variables
local player = Players.LocalPlayer
local Communication = ReplicatedStorage:WaitForChild("Communication")
local DataStore = Communication:WaitForChild("DataStore")

-- Enhanced State Management
local State = {
    autoUpgradeWorkers = false,
    autoUpgradeCapacity = false,
    autoUpgradeDropLevel = false,
    autoUnlockWorkers = false,
    autoMining = false,
    autoSelling = false,
    upgradeDelay = 0.5,
    unlockDelay = 1,
    selectedWorker = "Worker1",
    workerData = {},
    totalUpgrades = 0,
    lastUpgradeTime = 0,
    miningDelay = MINE_DELAY,
    sellingDelay = SELL_DELAY
}

-- Enhanced Statistics Tracking
local Stats = {
    workersUpgraded = 0,
    capacityUpgrades = 0,
    dropLevelUpgrades = 0,
    workersUnlocked = 0,
    blocksMined = 0,
    itemsSold = 0,
    startTime = os.time(),
    successfulOperations = 0,
    failedOperations = 0
}

-- Utility Functions
local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

local function logOperation(success, operationType)
    if success then
        Stats.successfulOperations = Stats.successfulOperations + 1
    else
        Stats.failedOperations = Stats.failedOperations + 1
    end
end

-- Mining and Selling Functions
local function mineBlock()
    local success, result = pcall(function()
        Communication.MineBlock:InvokeServer("4_11")
    end)
    if success then
        Stats.blocksMined = Stats.blocksMined + 1
    end
    logOperation(success, "mining")
    return success
end

local function sellItems()
    local success, result = pcall(function()
        Communication.SellItems:InvokeServer()
    end)
    if success then
        Stats.itemsSold = Stats.itemsSold + 1
    end
    logOperation(success, "selling")
    return success
end

-- Auto Mining Coroutine
local function startAutoMining()
    coroutine.wrap(function()
        while State.autoMining do
            mineBlock()
            wait(State.miningDelay)
        end
    end)()
end

-- Auto Selling Coroutine
local function startAutoSelling()
    coroutine.wrap(function()
        while State.autoSelling do
            sellItems()
            wait(State.sellingDelay)
        end
    end)()
end

-- [Previous functions remain the same: getWorkerData, upgradeWorker, unlockWorker, upgradeCapacity, upgradeDropLevel, etc.]

-- Enhanced UI Creation
local Window = OrionLib:MakeWindow({
    Name = "Worker Manager 3.0",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "WorkerManagerConfig",
    IntroText = "Loading..."
})

-- Main Tabs
local HomeTab = Window:MakeTab({
    Name = "Home",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AutomationTab = Window:MakeTab({
    Name = "Automation",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local MiningTab = Window:MakeTab({
    Name = "Mining",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local StatsTab = Window:MakeTab({
    Name = "Statistics",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Mining Section
local MiningSection = MiningTab:AddSection({ Name = "Mining Controls" })
MiningSection:AddToggle({
    Name = "Auto Mining",
    Default = false,
    Callback = function(Value)
        State.autoMining = Value
        if Value then
            startAutoMining()
        end
    end
})

MiningSection:AddToggle({
    Name = "Auto Selling",
    Default = false,
    Callback = function(Value)
        State.autoSelling = Value
        if Value then
            startAutoSelling()
        end
    end
})

MiningSection:AddSlider({
    Name = "Mining Delay (sec)",
    Min = 0.1,
    Max = 2,
    Default = MINE_DELAY,
    Increment = 0.1,
    Callback = function(Value)
        State.miningDelay = Value
    end
})

MiningSection:AddSlider({
    Name = "Selling Delay (sec)",
    Min = 0.5,
    Max = 5,
    Default = SELL_DELAY,
    Increment = 0.5,
    Callback = function(Value)
        State.sellingDelay = Value
    end
})

-- [Previous UI sections remain the same: HomeTab, AutomationTab, etc.]

-- Enhanced Statistics Section
local StatsSection = StatsTab:AddSection({ Name = "Statistics Overview" })
local statsLabel = StatsSection:AddLabel("Gathering statistics...")

-- Update Stats
coroutine.wrap(function()
    while wait(1) do
        local runtime = os.time() - Stats.startTime
        local successRate = Stats.successfulOperations / math.max(Stats.successfulOperations + Stats.failedOperations, 1) * 100
        statsLabel:Set(string.format(
            "Runtime: %s\nWorkers Upgraded: %d\nWorkers Unlocked: %d\nCapacity Upgrades: %d\nDrop Level Upgrades: %d\nBlocks Mined: %d\nItems Sold: %d\nSuccess Rate: %.2f%%",
            formatTime(runtime),
            Stats.workersUpgraded,
            Stats.workersUnlocked,
            Stats.capacityUpgrades,
            Stats.dropLevelUpgrades,
            Stats.blocksMined,
            Stats.itemsSold,
            successRate
        ))
    end
end)()

-- Load Worker Data
getWorkerData()

-- Notification for Successful Load
OrionLib:MakeNotification({
    Name = "Welcome!",
    Content = "Worker Manager 3.0 is ready.",
    Time = 5
})

-- Cleanup on Player Leave
Players.PlayerRemoving:Connect(function(plr)
    if plr == player then
        OrionLib:Destroy()
    end
end)
