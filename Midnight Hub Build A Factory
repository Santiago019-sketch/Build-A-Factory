local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Worker Manager V1", "DarkTheme")

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Communication = ReplicatedStorage:WaitForChild("Communication")
local DataStore = Communication:WaitForChild("DataStore")

-- Variables
local upgrading = false
local autoUpgrade = false
local selectedWorker = "Worker1"

-- Functions
local function getWorkerData()
    local args = {
        [1] = "workerdata"
    }
    return DataStore.Get:InvokeServer(unpack(args))
end

local function upgradeWorker(workerName)
    local args = {
        [1] = workerName
    }
    Communication.UpgradeWorker:FireServer(unpack(args))
end

local function unlockWorker(workerName)
    local args = {
        [1] = workerName
    }
    Communication.Unlock:FireServer(unpack(args))
end

local function upgradeCapacity()
    local args = {
        [1] = "BlockCapacity"
    }
    Communication.Upgrade:FireServer(unpack(args))
end

local function upgradeDropLevel()
    local args = {
        [1] = "DropLevel"
    }
    Communication.Upgrade:FireServer(unpack(args))
end

-- Auto Upgrade Function
local function startAutoUpgrade()
    while autoUpgrade do
        -- Try to upgrade all workers
        for i = 1, 5 do
            if not autoUpgrade then break end
            local workerName = "Worker" .. i
            
            -- Try to unlock if not already unlocked
            if i > 1 then
                unlockWorker(workerName)
                wait(0.5)
            end
            
            -- Attempt upgrade
            upgradeWorker(workerName)
            wait(0.5)
        end
        
        -- Try general upgrades
        upgradeCapacity()
        wait(0.2)
        upgradeDropLevel()
        
        wait(1) -- Delay between cycles
    end
end

-- GUI Creation
local WorkerTab = Window:NewTab("Workers")
local UpgradeTab = Window:NewTab("Upgrades")
local AutoTab = Window:NewTab("Automation")

-- Worker Section
local WorkerSection = WorkerTab:NewSection("Worker Management")

-- Worker Selection Dropdown
WorkerSection:NewDropdown("Select Worker", "Choose worker to manage", 
    {"Worker1", "Worker2", "Worker3", "Worker4", "Worker5"}, 
    function(selected)
        selectedWorker = selected
    end
)

-- Individual Worker Actions
WorkerSection:NewButton("Upgrade Selected Worker", "Upgrades currently selected worker", function()
    upgradeWorker(selectedWorker)
end)

WorkerSection:NewButton("Unlock Selected Worker", "Attempts to unlock selected worker", function()
    unlockWorker(selectedWorker)
end)

-- Quick Actions Section
local QuickSection = WorkerTab:NewSection("Quick Actions")

QuickSection:NewButton("Upgrade All Workers", "Attempts to upgrade all workers", function()
    for i = 1, 5 do
        upgradeWorker("Worker" .. i)
        wait(0.2)
    end
end)

QuickSection:NewButton("Unlock All Workers", "Attempts to unlock all workers", function()
    for i = 2, 5 do
        unlockWorker("Worker" .. i)
        wait(0.2)
    end
end)

-- Upgrades Section
local UpgradeSection = UpgradeTab:NewSection("General Upgrades")

UpgradeSection:NewButton("Upgrade Block Capacity", "Increases block capacity", function()
    upgradeCapacity()
end)

UpgradeSection:NewButton("Upgrade Drop Level", "Increases drop level", function()
    upgradeDropLevel()
end)

-- Automation Section
local AutoSection = AutoTab:NewSection("Auto Upgrade")

AutoSection:NewToggle("Auto Upgrade Everything", "Automatically upgrades all possible items", function(state)
    autoUpgrade = state
    if autoUpgrade then
        coroutine.wrap(startAutoUpgrade)()
    end
end)

-- Settings Section
local SettingsSection = AutoTab:NewSection("Settings")

SettingsSection:NewSlider("Upgrade Delay", "Delay between upgrades (seconds)", 5, 0.1, function(value)
    upgradeDelay = value
end)

-- Initialize
local function initialize()
    pcall(function()
        local data = getWorkerData()
        print("Worker data loaded")
    end)
end

initialize()

-- Keybinds
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightControl then
        Library:ToggleUI()
    end
end)
